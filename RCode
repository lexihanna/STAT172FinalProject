rm(list = ls())
# packages needed
library(ggplot2) #for graphing
library(RColorBrewer) #for custom color palettes
library(dplyr) #for manipulating, aggregating, piping

dogTravel <- read.csv('dogTravel.csv',
                      stringsAsFactors = TRUE)
allDogDescriptions <- read.csv('allDogDescriptions.csv',
                               stringsAsFactors = TRUE)
movesByLocation <- read.csv('movesByLocation.csv',
                            stringsAsFactors = TRUE)
str(dogTravel)
str(allDogDescriptions)
str(movesByLocation)

# clean data-----------------

## merge dogTravel and allDogDescriptions datasets
dog <- merge(dogTravel,allDogDescriptions,by="id")

## subset dog to only include necessary columns
df = subset(dog, select = c(still_there,breed_primary,
                            breed_mixed,color_primary, sex,age,size,coat,fixed,
                            special_needs,shots_current,env_children,
                            env_dogs,env_cats,house_trained, description.x, id
))

# changing the variable name of description.x to be more readable
df %>% rename(description = description.x)
# changing the character type to character to make it usable in LDA
df$description <- as.character(df$description)
# look for missing values
# so that our summary and structure calls do not get muddled by the description
cols = c("still_there","breed_primary",
         "breed_mixed","color_primary", "sex","age","size","coat","fixed",
         "special_needs","shots_current","env_children",
         "env_dogs","env_cats","house_trained", "id")
summary(df[cols])
# missing values are in still_there, color_primary,
# coat, env_children, env_dogs, and env_cats
# let's clean these variables

# cleaning still_there
table(df$still_there)
# changing still_there from a factor to character so we can modify it
df$still_there <- as.character(df$still_there)
# changing the missing values to False
df$still_there[df$still_there ==""] <- "False"
# check to see if it worked
table(df$still_there)
# changing still_there back to a factor
df$still_there <- as.factor(df$still_there)
# check to see if it worked
str(df$still_there)

# cleaning coat
table(df$coat)
# changing coat from a factor to character so we can modify it
df$coat <- as.character(df$coat)
# changing the missing values to Mixed
df$coat[df$coat ==""] <- "Mixed"
# check to see if it worked
table(df$coat)
#changing Curly, Hairless, Wire to Curly / Hairless / Wire
df$coat[df$coat %in% c("Curly", "Hairless", "Wire")] <- "Curly / Hairless / Wire"
# check to see if it worked
table(df$coat)
# sort the variables
df$coat <- factor(df$coat,
                  levels = c("Short", "Medium", "Long", "Mixed", "Curly / Hairless / Wire"))
# check to see if it worked
table(df$coat)
str(df$coat)

# cleaning env_children
table(df$env_children)
# changing env_children from a factor to character so we can modify it
df$env_children <- as.character(df$env_children)
# replacing the missing values with the mode of the column
df$env_children[df$env_children ==""] <- "True"
# check to see if it worked
table(df$env_children)
# changing still_there back to a factor
df$env_children <- as.factor(df$env_children)
# check to see if it worked
str(df$env_children)

# cleaning env_dogs
table(df$env_dogs)
# changing env_dogs from a factor to character so we can modify it
df$env_dogs <- as.character(df$env_dogs)
# replacing the missing values with the mode of the column
df$env_dogs[df$env_dogs ==""] <- "True"
# check to see if it worked
table(df$env_dogs)
# changing still_there back to a factor
df$env_dogs <- as.factor(df$env_dogs)
# check to see if it worked
str(df$env_dogs)

# cleaning env_cats
table(df$env_cats)
# changing env_cats from a factor to character so we can modify it
df$env_cats <- as.character(df$env_cats)
# replacing the missing values with the mode of the column
df$env_cats[df$env_cats ==""] <- "True"
# check to see if it worked
table(df$env_cats)
# changing still_there back to a factor
df$env_cats <- as.factor(df$env_cats)
# check to see if it worked
str(df$env_cats)

#let's look at what we've changed
str(df[cols])
summary(df[cols])
# let's assign dummy variables to breed_primary
# we want to look at the top 10 breeds and assign the other breeds as "other"
sort(table(df$breed_primary), decreasing = TRUE)[1:10]
`%notin%` <- Negate(`%in%`)
# changing breed_primary from a factor to character so we can modify it
df$breed_primary <- as.character(df$breed_primary)
df$breed_primary[df$breed_primary %notin% c("Labrador Retriever", "Chihuahua", "Pit Bull Terrier",
                                            "German Shepherd Dog", "Mixed Breed", "Hound", "Shepherd",
                                            "Terrier", "Beagle", "Boxer")] <- "Other"
df$breed_primary <- as.factor(df$breed_primary)
table(df$breed_primary)

#let's look at color_primary
summary(df$color_primary)
# let's assign dummy variables to color_primary
# we want to look at the breeds in order and combine the smallest categories
sort(table(df$color_primary), decreasing = TRUE)
# changing breed_primary from a factor to character so we can modify it
df$color_primary <- as.character(df$color_primary)
df$color_primary[df$color_primary %in% c("Merle (Blue)", "Sable", "Merle (Red)", 
                                         "Harlequin")] <- "Merle / Sable / Harlequin"
df$color_primary[df$color_primary %in% c("")] <- "Unknown"
# let's check!
df$color_primary <- as.factor(df$color_primary)
table(df$color_primary)

# let's see our final dataset
summary(df[cols])


# visualizations---------------

#look at our Y variable, still_there
ggplot(data = df)+
  geom_bar(aes(x = still_there)) +
  coord_flip() +
  labs(x = "Adopted", y = "Proportion") +
  ggtitle("Which dogs have/haven't been adopted?") +
  scale_fill_grey("Adopted")

# look at breed_primary and still_there
ggplot(data = df)+
  geom_bar(aes(x = breed_primary, fill = still_there), position = "fill") +
  coord_flip() +
  labs(x = "Primary breed", y = "Adopted") +
  ggtitle("Which primary breeds have/haven't been adopted?") +
  scale_fill_brewer("Adopted",palette ="Paired")

# look at color_primary and still_there
  ggplot(data = df)+
    geom_bar(aes(x = color_primary, fill = still_there), position = "fill") +
    coord_flip() +
    labs(x = "Primary color", y = "Adopted?") +
    ggtitle("Which color dogs have/haven't been adopted?") +
  scale_fill_brewer("Adopted",palette ="Paired")

# look at age and still_there  
  ggplot(data = df)+
    geom_bar(aes(x = age, fill = still_there), position = "fill") +
    coord_flip() +
    labs(x = "Age", y = "Adopted") +
    ggtitle("Which age of dogs have/haven't been adopted?") +
  scale_fill_brewer("ADopted",palette ="Paired")

  
# look at size and still_there
  ggplot(data = df)+
    geom_bar(aes(x = size, fill = still_there), position = "fill") +
    coord_flip() +
    labs(x = "Size", y = "Adopted") +
    ggtitle("Which size of dogs have/haven't been adopted?") +
  scale_fill_brewer("Adopted",palette ="Paired")  
  
# look at house_trained and still_there
  ggplot(data = df)+
    geom_bar(aes(x = house_trained, fill = still_there), position = "fill") +
    coord_flip() +
    labs(x = "House trained", y = "Adopted") +
    ggtitle("House trained dogs that have/haven't been adopted?") +
    scale_fill_brewer("House Trained",palette ="Paired")  
  
# predictive model--------------
# descriptive model---------------
# data mining enhancement--------------
# data mining packages
#install.packages("tidytext")
#install.packages("topicmodels")
#install.packages("reshape2")
library(tidytext) #for (tidy) text mining
library(topicmodels) #for LDA (topic modeling)
library(reshape2) #for reshaping data (long to wide or wide to long)

#I'm creating a new, tokenized data frame that is called "tokens"
tokens <- df %>% unnest_tokens(word, description)
#see first few rows - note reach row is now a single word (token)
head(tokens)

#load stop_words data frame
data(stop_words)
#remove all rows consisting of a stop word
tokens_clean <- tokens %>% anti_join(stop_words)
# seeing what it looks like
head(tokens_clean)

#Previously we counted the overall number of times each word showed up
#now we need to count the number of times each word shows up
#in each statement
#note that id is like a statement ID
tokens_count <- tokens_clean %>%
  #include id so it counts within unique id
  count(id, word, sort = TRUE)%>%
  ungroup()
#to do LDA, we need what is called a "Document Term Matrix" or DTM
dtm <- tokens_count %>%
  cast_dtm(id, word, n)

#now we can perform LDA! need to specify the number of topics (k)
#start with k = 20
lda <- LDA(dtm, k = 20, control = list(seed = 1234))
#Let's first look at what our topics are!
#This essentially means looking at the most characteristic
#words for each topic. A plot is the best way to do this
#(in my opinion)
#beta matrix gives the per topic per word probabilities
#a higher beta means that word is important for that topic
topics <- tidy(lda, matrix = "beta")
#get a small data frame of the top 10 words for each topic
top_terms <- topics %>%
  group_by(topic) %>% #within each topic do some function
  top_n(10, beta) %>% #that function is take the top 10 in terms of beta
  ungroup() %>%
  arrange(topic, -beta) #order (just for the plot)
top_terms
